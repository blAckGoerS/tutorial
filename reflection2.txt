working directory 
staging area 
repositories 

.git hidden directory/files 
meta data about history of the files in repository 
-to see in Linux using ls -a

working directory
git init 
git log 
git add 
staging area 
git commit -m "commit message"

master branch 
untrack files 

How can you use the staging area to make sure you have one commit per logical change ?
- I add all the files belong to a logical change into the staging area before making a commit,
by doing so I can make sure that each commit represented for a logical change. 


What are some situations when branches would be helpful in keeping your history organized? How would branches help?
- When you want to develop a new experimental feature or a new version of your project, but this new feature or version are not required by the main project. 
We just want to test that new feature, not sure to include it in the main project or not, and you still want to show the working version of the project.
- Another group want to develop new feature, the main group keeps maintaining current working version. We want to seperate the into two subproj to save time 
and not messing up. 

master branch - production quality branch, the version that should never break. 

How do the diagrams help you visualize the branch structure?
as a tree in which each branch of a tree visualize a branch 
